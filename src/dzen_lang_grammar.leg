%{
#include "dzen_list.h"
#include "dzen_parser.h"

dzen_list *dzen_parser_token_list = dzen_list_create();
%}

Start                   = ( func_token:Function text_token:TEXT?  {
                                                    dzen_list_add(dzen_parser_token_list, func_token);
                                                    dzen_list_add(dzen_parser_token_list, text_token);
                                                }
                        )+


# functions with a name and a specific parameter type like ^name(2x2) or ^otherName(+4;-2)
Function                = '^' name_token:NAME_IDENTIFIER WHITE_SPACES? '(' WHITE_SPACES? parameter_token:Parameter? WHITE_SPACES? ')'
{
    $$= dzen_token_create(
            DZEN_TOKEN_TYPE_FUNCTION,
            DZEN_VALUE_MODIFIER_NONE,
            parameter_token.parameter_list,
            name_token.value
    );

    //TODO free name_token?
}

# each possible parameter type, see other parameter types below
Parameter               = SizeParameter
                        | PositioningParameterList
                        | CONSTANT
                        | FILE_PATH
                        | COLOR_KEYWORD
                        | HEX_COLOR

# size parameter with a x and y coordinate like 2x2 or 2X2
SizeParameter           = width_token:NUMBER DIMENSION_OPERATOR height_token:NUMBER
{
    dzen_list *parameter_list = dzen_list_create();

    dzen_list_add(parameter_list, width_token);
    dzen_list_add(parameter_list, height_token);

    $$= dzen_token_create(
            DZEN_TOKEN_TYPE_SIZE_PARAMETER,
            DZEN_VALUE_MODIFIER_NONE,
            parameter_list,
            NULL
    );
}

# positioning parameter like +5, -5 or 5
PositioningParameter    = operator_token:MOVE_OPERATOR? value_token:NUMBER
{
    dzen_token_value_modifier value_modifier; //TODO extract to helper func?

    switch (operator_token.type) {
        case DZEN_TOKEN_TYPE_INCREMENT_OPERATOR:
            value_modifier = DZEN_VALUE_MODIFIER_INCREMENT;
            break;

        case DZEN_TOKEN_TYPE_DECREMENT_OPERATOR:
            value_modifier = DZEN_VALUE_MODIFIER_DECREMNT;
            break;

        default:
            value_modifier = DZEN_VALUE_MODIFIER_NONE;
            break;
    }

    $$= dzen_token_create(
            DZEN_TOKEN_TYPE_POSITIONING_PARAMETER,
            value_modifier,
            NULL,
            value_token.value
    );

    //TODO free operator_token && value_token?
}

# a parameter list of positioning parameter like +4;-6 where the first parameter
# represents the x parameter and the second one the y parameter
PositioningParameterList    = x:PositioningParameter (WHITE_SPACES? ';' WHITE_SPACES? y:PositioningParameter)?
{
    $$= MAKE_DZEN_POSITIONING_PARAMETER_LIST_TOKEN(x, y);
}
                            | x:PositioningParameter? WHITE_SPACES? ';' WHITE_SPACES? y:PositioningParameter
{
    $$= MAKE_DZEN_POSITIONING_PARAMETER_LIST_TOKEN(x, y);
}

# a name usually used for function names like fg or bg
NAME_IDENTIFIER         = < [a-zA-Z]+ >
{
    $$= MAKE_DZEN_NAME_IDENTIFIER_TOKEN(yytext);
}

# any text which is displayed
TEXT                    = < [a-zA-Z_0-9 ]+ >
{
    $$= MAKE_DZEN_TEXT_TOKEN(yytext);
}

FILE_EXTENSION          = '.' [a-zA-Z]+

# represents a file path
FILE_PATH               = < ('./' | '../')* [a-zA-Z0-9_/]+ FILE_EXTENSION >
{
    $$= MAKE_DZEN_FILE_PATH_TOKEN(yytext);
}

# a constant like _TOP
CONSTANT                = < '_' [A-Z]+ >
{
    $$= MAKE_DZEN_CONSTANT_TOKEN(yytext);
}

NUMBER                  = < [0-9]+ >
{
    $$= MAKE_DZEN_NUMBER_TOKEN(atoi(yytext));
}

DIMENSION_OPERATOR      = 'x' | 'X'

MOVE_OPERATOR           = INCREMENT_OPERATOR { $$= DZEN_PLUS_OPERATOR_TOKEN }
                        | DECREMENT_OPERATOR { $$= DZEN_MINUS_OPERATOR_TOKEN }

HEX_COLOR_THREE_DIGIT   = '#' [a-fA-F0-9][a-fA-F0-9][a-fA-F0-9];
HEX_COLOR_SIX_DIGIT     = '#' [a-fA-F0-9][a-fA-F0-9][a-fA-F0-9][a-fA-F0-9][a-fA-F0-9][a-fA-F0-9];

# a hex color with alpha
HEX_COLOR_RGBA          = '#' [a-fA-F0-9][a-fA-F0-9][a-fA-F0-9][a-fA-F0-9][a-fA-F0-9][a-fA-F0-9][a-fA-F0-9][a-fA-F0-9];

# representaion of a hex color like #FFF, #FF0000 or #FFFF00FF
HEX_COLOR               = < HEX_COLOR_RGBA | HEX_COLOR_SIX_DIGIT | HEX_COLOR_THREE_DIGIT >
{
    $$= MAKE_DZEN_HEX_COLOR_TOKEN(yytext);
}

# list of colors as keyword
COLOR_KEYWORD           = < 'red' >     { $$= MAKE_DZEN_COLOR_KEYWORD_TOKEN(yytext); }
                        | < 'yellow' >  { $$= MAKE_DZEN_COLOR_KEYWORD_TOKEN(yytext); }
                        | < 'orange' >  { $$= MAKE_DZEN_COLOR_KEYWORD_TOKEN(yytext); }

INCREMENT_OPERATOR      = '+'
DECREMENT_OPERATOR      = '-'

WHITE_SPACES            = ' '+
